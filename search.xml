<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Retrofit基础]]></title>
    <url>%2F2017%2F04%2F17%2FRetrofit%2FRetrofit%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[资料 Github 官网 深入浅出 Retrofit，这么牛逼的框架你们还不来看看？ 你真的会用Retrofit2吗?Retrofit2完全教程 Retrofit2 使用方法 摘要 0 简介 1 配置 2 基础用法 3 注解详解 4 Retrofit设置 5 RxJava支持 0 简介Retrofit结构简单，源码只有37个文件，其中22个文件是注解以及HTTP相关的 1 配置1.1导入模组build.gradle文件1compile 'com.squareup.retrofit2:retrofit:2.2.0' 1.2 混淆12345678# Platform calls Class.forName on types which do not exist on Android to determine platform.-dontnote retrofit2.Platform# Platform used when running on Java 8 VMs. Will not be used at runtime.-dontwarn retrofit2.Platform$Java8# Retain generic type information for use by reflection by converters and adapters.-keepattributes Signature# Retain declared checked exceptions for use by a Proxy instance.-keepattributes Exceptions 2 基础用法2.1 创建Retrofit实例 注：Retrofit2的baseUrl必须以/(斜线)结束，不然后抛出IllegalArgumentException异常 1234// Retrofit 实例Retrofit retrofit = new Retrofit.Builder().baseUrl("https://api.github.com/") // 主机.build(); 2.2 定义接口和Bean 这里interfacer无法直接调用该方法，需要用Retrofit实例创建一个GitHubService代理对象 1234567891011// Beanpublic class Repo &#123;public long id;public String name;&#125;// 请求接口public interface GitHubService &#123;@GET("users/&#123;user&#125;/repos")Call&lt;List&lt;Repo&gt;&gt; listRepos(@Path("user") String user);&#125; 2.3 发起请求 下面包含了异步请求、同步请求的示例，同时也包含了取消请求、克隆请求的示例 12345678910111213141516171819202122232425262728293031// 网络请求Call&lt;List&lt;Repo&gt;&gt; call = retrofit.create(GitHubService.class) // 获取服务.listRepos("octocat"); // 获取请求// 响应处理，异步call.enqueue(new Callback&lt;List&lt;Repo&gt;&gt;() &#123; // 获取响应@Overridepublic void onResponse(Call&lt;List&lt;Repo&gt;&gt; call, Response&lt;List&lt;Repo&gt;&gt; response) &#123;if (response.isSuccessful()) &#123; // 响应码 200~300Log.d(TAG, "onResponse: " + response.body()); // 显示 List&lt;Repo&gt;&#125;&#125;@Overridepublic void onFailure(Call&lt;List&lt;Repo&gt;&gt; call, Throwable t) &#123;&#125;&#125;);// 响应处理，同步try &#123;Response&lt;List&lt;Repo&gt;&gt; response = call.execute();&#125; catch (IOException e) &#123;e.printStackTrace();&#125;// 响应处理，取消 Callcall.cancel();// 响应处理，克隆 clonecall.clone(); 3 注解详解Retrofit中的注解共分为三类，分别是HTTP请求方法、标记类、参数类 3.1 HTTP请求方法3.1.1 对应HTTP标准请求方法的注解 注解接收一个字符串表示接口路径，与BaseUrl组成完整Url 请求方法类型@GET/@POST/@PUT/@DELETE/@PATCH/@HEAD/@OPTIONS12@GET("users/list")@GET("users/list?sort=desc") 3.1.2 @HTTP注解代替以上任意一个注解，有3个属性：method、payh、hasBody 123456789public interface BlogService &#123;/*** method 表示请求的方法，区分大小写* path表示路径* hasBody表示是否有请求体*/@HTTP(method = "GET", path = "blog/&#123;id&#125;", hasBody = false)Call&lt;ResponseBody&gt; getBlog(@Path("id") int id);&#125; 3.2 标记类3.2.1 表单请求1.@FormUrlEncoded 表示请求体是一个Form表单，例如在网站上登录页面就是此种方式Content-Type:application/x-www-form-urlencoded 2.@Multipart 表示请求体是一个支持文件上传的Form表单，例如在网站上传文件就是使用此种方式Content-Type:multipart/form-data 3.2.2 其他标记1.@Streaming 表示响应的数据用流的形式返回，如果使用该注解，默认会把数据全部载入内存之后通过流读取内存中的数据。返回数据较大时使用此注解 3.3 参数类3.3.1 请求地址@Query参数为null,会自动忽略 @Path/@Query/@QueryMap/@Url1234567891011// 通过 @Path 替换相对地址中的 &#123;&#125;@GET("group/&#123;id&#125;/users")Call&lt;List&lt;User&gt;&gt; groupList(@Path("id") int groupId);// 通过 @Query 设置请求参数@GET("group/&#123;id&#125;/users")Call&lt;List&lt;User&gt;&gt; groupList(@Path("id") int groupId, @Query("sort") String sort);// 通过 @QueryMap 设置请求参数 Map@GET("group/&#123;id&#125;/users")Call&lt;List&lt;User&gt;&gt; groupList(@Path("id") int groupId, @QueryMap Map&lt;String, String&gt; options); 3.3.2 请求头1.静态请求头 @Headers 请求头不会覆盖,同名头都会包含进请求头中12345678910@Headers("Cache-Control: max-age=640000")@GET("widget/list")Call&lt;List&lt;Widget&gt;&gt; widgetList();@Headers(&#123;"Accept: application/vnd.github.v3.full+json","User-Agent: Retrofit-Sample-App"&#125;)@GET("users/&#123;username&#125;")Call&lt;User&gt; getUser(@Path("username") String username); 2.动态请求头 @Header 值为null，请求头被删除，否则值调用toString();12@GET("user")Call&lt;User&gt; getUser(@Header("Authorization") String authorization) 3.批量请求头 所有请求都需要请求头，使用OkHttp interceptor添加 3.3.3 请求体1.非表单请求体非表单请求体 @Body 使用指定Retrofit的转换器转化请求体，如果没有就使用RequestBody例如Gson转换器将请求体转换为Json数据12@POST("users/new")Call&lt;User&gt; createUser(@Body User user); 2.表单请求体 表单请求体 @Field/@FieldMap/@Part/@PartMap 1.@Field和FieldMao与@FormUrlEncoded注解配合使用2.@Part和PartMap与Multipart注解配合使用，可以进行文件上传3.FieldMap的接受类型是Map&lt;String,String&gt;,非String类型会调用其toString方法4.PartMap的默认接受类型是Map&lt;String,RequestBody&gt;,非RequestBody类型会通过Converter转换5.{占位符}和PATH尽量只用在URL的path部分，URL中的参数使用Query和QueryMap代替,保证接口定义的简洁6.Query、Field和Part这三者都支持数组和实现了Iterable接口的类型，如List,Set等，方便向后台传递数据 1234567@FormUrlEncoded // Form表单@POST("user/edit")Call&lt;User&gt; updateUser(@Field("first_name") String first, @Field("last_name") String last);@Multipart // 上传文件表单@PUT("user/photo")Call&lt;User&gt; updateUser(@Part("photo") RequestBody photo, @Part("description") RequestBody description); 4 Retrofit设置4.1 转换器(Converter)ResponseBody为默认响应体类型，即Call&lt;ResponseBody&gt;,可设置转换器转换 Gson: com.squareup.retrofit2:converter-gson Jackson: com.squareup.retrofit2:converter-jackson Moshi: com.squareup.retrofit2:converter-moshi Protobuf: com.squareup.retrofit2:converter-protobuf Wire: com.squareup.retrofit2:converter-wire Simple XML: com.squareup.retrofit2:converter-simplexml Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars 设置转换器1234Retrofit retrofit = new Retrofit.Builder().baseUrl("https://api.github.com").addConverterFactory(GsonConverterFactory.create(gson)) // 设置转换器，可传入Gson实例.build(); 4.2 调用适配器(CallAdapter)Converter是对于Call&lt;T&gt;中T的转换，而CallAdapter则可以对Call进行转换 Rxjava com.squareup.retrofit2:adapter-rxjava Guava com.squareup.retrofit2:adapter-guava Java8 com.squareup.retrofit2:adapter-java8 设置调用适配器1234Retrofit retrofit = new Retrofit.Builder().baseUrl("https://api.github.com").addCallAdapterFactory(RxJavaCallAdapterFactory.create())// 设置调用适配器.build(); 5 RxJava支持 需要在build.gradle配置RxJava调用适配器 使用RxJava获取Header和响应码的方法1.用Observable&lt;Response&lt;T&gt;&gt;代替Observable&lt;T&gt;,这里的Response指retrofit.Response2.用Observable&lt;Result&lt;T&gt;&gt;代替Observable&lt;T&gt;，这里的Result是指retrofit2.adapter.rxjava.Result,这个Result中包含了Response的实例 1234567891011121314151617181920212223242526272829303132// Beanpublic class Repo &#123;public long id;public String name;&#125;// 请求接口public interface GitHubService &#123;@GET("users/&#123;user&#125;/repos")Observable&lt;List&lt;Repo&gt;&gt; listReposBy(@Path("user") String user);&#125;// Retrofit 实例Retrofit retrofit = new Retrofit.Builder().baseUrl("https://api.github.com/").addConverterFactory(GsonConverterFactory.create()).addCallAdapterFactory(RxJava2CallAdapterFactory.create()) // 转换器.build();// 网络观察者Observable&lt;List&lt;Repo&gt;&gt; observable = retrofit.create(GitHubService.class).listReposBy("octocat");// 数据处理observable.subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Consumer&lt;List&lt;Repo&gt;&gt;() &#123;@Overridepublic void accept(@NonNull List&lt;Repo&gt; repos) throws Exception &#123;Log.d(TAG, "Rxjava2 - onResponse: " + repos);&#125;&#125;);]]></content>
  </entry>
</search>
